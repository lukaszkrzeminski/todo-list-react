{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/styledHeaderButtons.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/List/styled.js","features/tasks/TasksPage/List/index.js","features/tasks/TasksPage/TaskList/styled.js","routes.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/searchQueryParameterName.js","features/tasks/TasksPage/Buttons/index.js","common/Header/index.js","common/Main/styled.js","common/Main/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/index.js","features/author/AuthorPage.js","features/tasks/TaskPage/index.js","common/Navigation/styled.js","common/Navigation/index.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","alto","Formular","styled","form","white","Label","label","Header","h2","ButtonAdd","button","breakpoint","mobileMax","FunctionButton","span","Button","showDone","css","teal","grey","checkAll","fetchTasks","saveTasksInLocalStorage","taskTable","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addNewTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","setTasks","loadExampleTasks","actions","selectTasksState","selectTasks","selectHideDone","selectExampleTasks","input","Form","focusInput","inputRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","isLoading","useSelector","onSubmit","event","preventDefault","trim","content","nanoid","disabled","onClick","Input","value","onChange","target","placeholder","autoFocus","ref","ListDiv","div","List","headerTitle","headerButtons","body","TasksList","ul","Item","li","hidden","Content","StyledLink","Link","green","remove","red","toTask","TaskList","location","useLocation","query","URLSearchParams","search","get","filter","toUpperCase","includes","selectTasksByQuery","map","key","to","Buttons","length","every","title","className","MainContainer","main","Main","props","children","Container","Paragraph","p","black","ParagraphHeader","ParagraphBody","Section","contentHeader","contentBody","Wrapper","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","useRef","current","focus","Search","AuthorPage","TaskPage","params","useParams","taskId","find","getTaskById","StyledNavLink","NavLink","attrs","activeClassName","StyledList","Navigation","path","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.145438b3.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n         box-sizing: border-box;\r\n         line-height: 1.15;\r\n    }\r\n\r\n    *, ::after, ::before{\r\n         box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n         font-family: 'Lato', sans-serif;\r\n         margin: 0;\r\n         background-color: ${({theme}) => theme.color.alto};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Formular = styled.form`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    margin: 0;\r\n    padding: 15px;\r\n    font-weight: bold;\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n    flex-basis: 100%;\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const ButtonAdd = styled.button`\r\n    width: auto;\r\n    padding: 10px;\r\n    margin: 20px 15px;\r\n    background-color: teal;\r\n    color: ${({theme}) => theme.color.white};\r\n    border: none;\r\n    flex-grow: 0;\r\n    transition: 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        flex-grow: 1;\r\n        margin: 10px 15px;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const FunctionButton = styled.span`\r\n    font-size: 20px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    ${({ showDone }) => showDone && css`\r\n        border: none;\r\n        background-color: ${({ theme }) => theme.color.white};\r\n        width: auto;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n\r\n    ${({ checkAll }) => checkAll && css`\r\n        border: none;\r\n        background-color: ${({ theme }) => theme.color.white};\r\n        width: auto;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n\r\n    ${({ fetchTasks }) => fetchTasks && css`\r\n        border: none;\r\n        background-color: ${({ theme }) => theme.color.white};\r\n        width: auto;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n`;","const localStorageKey = \"taskTable\";\r\n\r\nexport const saveTasksInLocalStorage = taskTable => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(taskTable));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'taskTable',\r\n    initialState: {\r\n        taskTable: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ taskTable }, { payload }) => {\r\n            taskTable.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.taskTable.findIndex(task => task.id === action.payload);\r\n            state.taskTable[index].done = !state.taskTable[index].done;\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.taskTable.findIndex(task => task.id === action.payload);\r\n            state.taskTable.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            for (const task of state.taskTable) {\r\n                task.done = true;\r\n            };\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, {payload: taskTable}) => {\r\n            state.taskTable = taskTable;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n        setTasks: (state, { payload: taskTable }) => {\r\n            state.taskTable = taskTable;\r\n        },\r\n        loadExampleTasks: (state, action) => {\r\n            state.loading = action.payload;\r\n        },\r\n    },\r\n});\r\nexport const {\r\n    addNewTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n    setTasks,\r\n    loadExampleTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.taskTable;\r\n\r\nexport const selectTasks = state => selectTasksState(state).taskTable;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectExampleTasks = state => selectTasksState(state).loading;\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\nexport const selectTasksByQuery = (state, query) => {\r\n    if (!query || query === \"\") {\r\n        return selectTasksState(state).taskTable;\r\n    }\r\n    return selectTasks(state).filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    padding: 5px 20px;\r\n    margin: 20px 15px;\r\n    flex-grow: 1;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        margin: 10px 15px;\r\n    }\r\n`;","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { Formular, Label, Header, ButtonAdd } from \"./styled\";\r\nimport { Button } from \"../../styledHeaderButtons\";\r\nimport { addNewTask, fetchExampleTasks, selectExampleTasks } from \"../../tasksSlice\";\r\nimport Input from '../../Input';\r\n\r\nconst Form = ({ focusInput, inputRef }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoading = useSelector(selectExampleTasks);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent.trim() === \"\") {\r\n            return;\r\n        }\r\n\r\n        dispatch(addNewTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n\r\n    return (\r\n        <Formular onSubmit={onFormSubmit}>\r\n            <Label>\r\n                <Header>\r\n                    Dodaj nowe zadanie\r\n                    <Button\r\n                        fetchTasks\r\n                        disabled={isLoading}\r\n                        onClick={() => dispatch(fetchExampleTasks())}\r\n                    >\r\n                        {isLoading ? \"Ładowanie zadań\" : \"Pobierz przykładowe zadania\"}\r\n                    </Button>\r\n                </Header>\r\n                <Input\r\n                    value={newTaskContent}\r\n                    onChange={(event) => setNewTaskContent(event.target.value)}\r\n                    placeholder=\"Co jest do zrobienia?\" autoFocus\r\n                    ref={inputRef}\r\n                />\r\n                <ButtonAdd>Dodaj zadanie</ButtonAdd>\r\n\r\n            </Label>\r\n        </Formular>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ListDiv = styled.div`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n    margin-top: 15px;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n    padding: 15px;\r\n    margin: 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: unset;\r\n        grid-template-rows: 1fr 2fr;\r\n    }\r\n`;","import React from 'react';\r\nimport {ListDiv, Header} from \"./styled\";\r\n\r\nconst List = ({ headerTitle, headerButtons, body }) => (\r\n    <ListDiv>\r\n        <Header>\r\n            {headerTitle}\r\n            {headerButtons}\r\n        </Header>\r\n        {body}\r\n    </ListDiv>\r\n);\r\n\r\nexport default List;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: ${({ theme }) => theme.color.alto} 1px solid;\r\n    margin: 10px;\r\n    padding: 15px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-wrap: nowrap;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    margin: 10px;\r\n    padding: 10px;\r\n    text-align: justify;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n\r\n    color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    border: none;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    flex-shrink: 0;\r\n    cursor: pointer;\r\n    transition: 1s;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n        color: ${({ theme }) => theme.color.white};\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n        color: white;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/o-autorze\";\r\nexport const toTask = ({id} = {id: \":id\"}) => `/zadania/${id}`;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { TasksList, Item, Content, Button, StyledLink } from \"./styled\"\r\nimport { selectHideDone, toggleTaskDone, removeTask, selectTasksByQuery } from '../../tasksSlice';\r\nimport { useLocation } from 'react-router-dom';\r\nimport searchQueryParameterName from '../searchQueryParameterName';\r\nimport { toTask } from '../../../../routes';\r\n\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const query = searchParams.get(searchQueryParameterName);\r\n\r\n    const taskTable = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <TasksList>\r\n            {taskTable.map(task =>\r\n                <Item key={task.id} hidden={task.done && hideDone}>\r\n                    <Button\r\n                        done\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \" \"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                </Button>\r\n                </Item>\r\n            )}\r\n        </TasksList>\r\n    )\r\n};\r\n\r\nexport default TaskList;","export default \"szukaj\";","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FunctionButton, Button } from \"../../styledHeaderButtons\";\r\nimport { selectTasks, selectHideDone, toggleHideDone, setAllDone } from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const taskTable = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    if (taskTable.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <FunctionButton>\r\n            <Button\r\n                showDone\r\n                onClick={() => dispatch(toggleHideDone())}\r\n            >\r\n                {hideDone ? \"Wyświetl\" : \"Ukryj\"} wykonane\r\n            </Button>\r\n            <Button\r\n                checkAll\r\n                onClick={() => dispatch(setAllDone())}\r\n                disabled={taskTable.every(({ done }) => done)}\r\n            >\r\n                Zakończ wszystkie\r\n            </Button>\r\n        </FunctionButton>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Header = ({ title }) => (\r\n  <header className=\"header\">\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.main`\r\n    max-width: 800px;\r\n    margin: 60px auto;\r\n    padding: 10px;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        margin: 20px auto;\r\n    }\r\n`;","import React from 'react';\r\nimport {MainContainer} from \"./styled\";\r\n\r\nconst Main = (props) => (\r\n    <MainContainer>\r\n        {props.children}\r\n    </MainContainer>\r\n)\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n    padding: 10px 20px;\r\n    margin-top: 15px;\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    color: ${({theme}) => theme.color.black};\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const ParagraphHeader = styled.span`\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    margin: 0;\r\n    padding: 10px 0;\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n`;\r\n\r\nexport const ParagraphBody = styled.span`\r\n    margin: 10px 0;\r\n    padding: 10px 0;\r\n    line-height: 1.5;\r\n`;","import React from \"react\";\r\nimport { Container, Paragraph, ParagraphHeader, ParagraphBody } from \"./styled\";\r\n\r\nconst Section = ({ contentHeader, contentBody }) => (\r\n    <Container>\r\n        <Paragraph>\r\n            <ParagraphHeader>\r\n                {contentHeader}\r\n            </ParagraphHeader>\r\n            <ParagraphBody>\r\n                {contentBody}\r\n            </ParagraphBody>\r\n        </Paragraph>\r\n    </Container>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParameterName from \"../searchQueryParameterName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n    const query = useQueryParameter(searchQueryParameterName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParameterName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n}","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        }\r\n        else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","import React, { useRef } from 'react';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Header from \"../../../common/Header\";\nimport Main from \"../../../common/Main\";\nimport Section from '../../../common/Section';\nimport Search from './Search';\n\nfunction TasksPage() {\n\n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current.focus();\n  }\n\n  return (\n    <Main>\n      <Header title=\"Lista zadań\" />\n      <Form focusInput={focusInput} inputRef={inputRef} />\n      <Section\n        contentHeader=\"Wyszukiwarka\"\n        contentBody={<Search />}>\n      </Section>\n      <List\n        headerTitle=\"Lista zadań:\"\n        headerButtons={\n          <Buttons />}\n        body={\n          <TaskList />}\n      />\n    </Main>\n  );\n}\n\nexport default TasksPage;\n","import React from \"react\";\r\nimport Main from \"../../common/Main\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nfunction AuthorPage() {\r\n\r\n    return (\r\n        <Main>\r\n            <Header title=\"O autorze\" />\r\n            <Section\r\n                contentHeader=\"Łukasz Krzemiński\"\r\n                contentBody={\r\n                    <>\r\n                        Cześć 😁, \r\n                        <br />\r\n                        nazywam się Łukasz, <b>pochodzę z Olesna</b> - małego miasteczka w województwie opolskim. Jestem absolwentem <i>Politechniki Wrocławskiej</i> na kierunku <i>Automatyka i Robotyka</i>. Mam 25 lat i mieszkam we Wrocławiu. Obecnie pracuję w firmie zarządzającej i monitorującej sieć bankomatów i wpłatomatów. Od jakiegoś czasu postanowiłem spróbować swoich sił w nauce <i>Frontendu</i> aby rozpocząć pracę programisty.\r\n                        <br />\r\n                        W czasie wolnym od pracy czy też nauki zajmuję się amatorsko <strong>produkcją\r\n                        domowego piwa</strong>. Póki co mam na koncie zaledwie 7 warek ale w głowie rodzą się coraz bardziej rozbudowane i szalone pomysły. Chyba każdy lubi po ciężkim dniu zasiąść wygodnie w fotelu i uraczyć się odpowiednio schłodzonym piwkiem :). Dużą satysfakcję sprawia fakt, że mogę poczęstować rodzinę czy znajomych własnym wyrobem!\r\n                    </>\r\n                }\r\n            />\r\n        </Main>\r\n    );\r\n}\r\n\r\nexport default AuthorPage;","import React from \"react\";\r\nimport Main from \"../../../common/Main\";\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const params = useParams();\r\n    const task = useSelector(state => getTaskById(state, params.id));\r\n\r\n    return (\r\n        <Main>\r\n            <Header title=\"Szczegóły zadania:\" />\r\n            <Section\r\n                contentHeader={task ? task.content : \"Nie ma takiego zadania 😥\"}\r\n                contentBody={task ? <><strong>Ukończono: </strong> {task.done ? \"Tak\" : \"Nie\"}</> : \"\"}\r\n            />\r\n        </Main>\r\n    );\r\n}\r\n\r\nexport default TaskPage;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    &.${activeClassName}{\r\n        font-weight: bold;\r\n    }\r\n    &:hover{\r\n        cursor: pointer;\r\n        border-bottom: 1px solid;\r\n    }\r\n    text-decoration: none;\r\n    color: ${({theme}) => theme.color.white};\r\n    font-size: 20px;\r\n    padding: 10px 20px;\r\n`;\r\n\r\nexport const StyledList = styled.ul`\r\n    background-color: ${({theme}) => theme.color.teal};\r\n    padding: 20px 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n`;\r\n","import React from \"react\";\r\nimport {StyledList, StyledNavLink} from \"./styled\";\r\nimport {toTasks, toAuthor} from \"../../routes\";\r\n\r\nexport default () => {\r\n    return (\r\n        <nav>\r\n            <StyledList>\r\n                <li>\r\n                    <StyledNavLink to={toTasks()}>Lista zadań</StyledNavLink>\r\n                </li>\r\n                <li>\r\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n                </li>\r\n            </StyledList>\r\n        </nav>\r\n    );\r\n};","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport Navigation from \"./common/Navigation\";\r\nimport {toTasks, toAuthor, toTask} from \"./routes\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n            <Switch>\r\n                <Route path={toTask()}>\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path={toTasks()}>\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path={toAuthor()}>\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to={toTasks()} />\r\n                </Route>\r\n            </Switch>\r\n    </HashRouter>\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        white: \"#FFF\",\r\n        alto: \"#D3D3D3\",\r\n        green: \"#00cc00\",\r\n        red: \"#cc0000\",\r\n        teal: \"#008080\",\r\n        grey: \"#808080\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, takeLatest, put, delay, takeEvery, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, fetchExampleTasksSuccess, fetchExampleTasksError, selectTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try{\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    }catch(error){\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak\");\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const taskTable = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, taskTable);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        taskTable: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}