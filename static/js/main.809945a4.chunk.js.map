{"version":3,"sources":["Form/index.js","List/index.js","Tasks/index.js","Buttons/index.js","Header/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","onChange","target","placeholder","autoFocus","List","headerTitle","headerButtons","body","Tasks","taskTable","hideDone","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Header","title","Main","props","children","App","setHideDone","setTaskTable","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.809945a4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent.trim() === \"\"){\r\n            return;\r\n        }\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <label className=\"form__label\">\r\n                <h2 className=\"form__header\">\r\n                    Dodaj nowe zadanie\r\n                    </h2>\r\n\r\n                <input\r\n                    value={newTaskContent}\r\n                    onChange={(event) => setNewTaskContent(event.target.value)}\r\n                    className=\"form__input\"\r\n                    placeholder=\"Co jest do zrobienia?\" autoFocus\r\n                />\r\n                <button className=\"form__button\">Dodaj zadanie</button>\r\n\r\n            </label>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst List = ({ headerTitle, headerButtons, body }) => (\r\n    <div className=\"list\">\r\n        <h2 className=\"list__header\">\r\n            {headerTitle}\r\n            {headerButtons}\r\n        </h2>\r\n        {body}\r\n    </div>\r\n);\r\n\r\nexport default List;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ taskTable, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"list__tasks\">\r\n        {taskTable.map(task =>\r\n            <li key={task.id} className={`list__item ${task.done && hideDone ? \"list__item--hidden\" : \"\"}`}>\r\n                <button\r\n                    className=\"list__button list__button--done\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"âœ”\" : \" \"}\r\n                </button>\r\n                <span className={`list__taskContent ${task.done ? \" list__taskContent--done\" : \"\"}`}> {task.content} </span>\r\n                <button\r\n                    className=\"list__button list__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ðŸ—‘\r\n                </button>\r\n            </li>\r\n        )}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ hideDone, taskTable, toggleHideDone, setAllDone }) => {\r\n    if (taskTable.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <span className=\"list__functionButton\">\r\n            <button\r\n                className=\"list__button--showDone\"\r\n                onClick={toggleHideDone}\r\n            >\r\n                {hideDone ? \"WyÅ›wietl\" : \"Ukryj\"} wykonane\r\n            </button>\r\n            <button\r\n                className=\"list__button--checkAll\"\r\n                onClick={setAllDone}\r\n                disabled={taskTable.every(({ done }) => done)}\r\n            >\r\n                ZakoÅ„cz wszystkie\r\n            </button>\r\n        </span>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = (props) => (\r\n    <main className=\"main\">\r\n        {props.children}\r\n    </main>\r\n)\r\n\r\nexport default Main;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [taskTable, setTaskTable] = useState([\n    { id: 1, content: \"Undone task 1\", done: false },\n    { id: 2, content: \"Done task 2\", done: true },\n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const setAllDone = () => {\n    setTaskTable(taskTable => taskTable.map(task => ({\n      ...task,\n      done: true,\n    })));\n  }\n\n  const removeTask = (id) => {\n    setTaskTable(taskTable => taskTable.filter(taskTable => taskTable.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTaskTable(taskTable => taskTable.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const addNewTask = (content) => {\n    setTaskTable(taskTable => [\n      ...taskTable,\n      {\n        content,\n        done: false,\n        id: taskTable.length === 0 ? 1 : taskTable[taskTable.length - 1].id + 1,\n      }\n    ])\n  }\n\n  return (\n    <Main>\n      <Header title=\"Lista zadaÅ„\" />\n      <Form addNewTask={addNewTask} />\n\n      <List\n        taskTable={taskTable}\n        hideDone={hideDone}\n        headerTitle=\"Lista zadaÅ„:\"\n        headerButtons={\n          <Buttons\n            taskTable={taskTable}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n        body={\n          <Tasks\n            taskTable={taskTable}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}