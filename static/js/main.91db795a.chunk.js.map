{"version":3,"sources":["GlobalStyle.js","Form/styled.js","Form/index.js","List/styled.js","List/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Header/index.js","Main/styled.js","Main/index.js","App.js","useTasks.js","serviceWorker.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","alto","Formular","styled","form","white","Label","label","Header","h2","Input","input","breakpoint","mobileMax","Button","button","Form","addNewTask","focusInput","inputRef","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","value","onChange","target","placeholder","autoFocus","ref","ListDiv","div","List","headerTitle","headerButtons","body","TasksList","ul","Item","li","hidden","css","Content","span","done","green","remove","red","Tasks","taskTable","hideDone","removeTask","toggleTaskDone","map","task","key","id","onClick","content","FunctionButton","showDone","teal","grey","checkAll","Buttons","toggleHideDone","setAllDone","length","disabled","every","title","className","MainContainer","main","Main","props","children","App","setHideDone","JSON","parse","localStorage","getItem","setTaskTable","useEffect","setItem","stringify","filter","useTasks","useRef","current","focus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.91db795a.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n         box-sizing: border-box;\r\n         line-height: 1.15;\r\n    }\r\n\r\n    *, ::after, ::before{\r\n         box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n         font-family: 'Lato', sans-serif;\r\n         margin: 10px;\r\n         background-color: ${({theme}) => theme.color.alto};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Formular = styled.form`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    margin: 0;\r\n    padding: 15px;\r\n    font-weight: bold;\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n    flex-basis: 100%;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 5px 20px;\r\n    margin: 20px 15px;\r\n    flex-grow: 1;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        margin: 10px 15px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: auto;\r\n    padding: 10px;\r\n    margin: 20px 15px;\r\n    background-color: teal;\r\n    color: ${({theme}) => theme.color.white};\r\n    border: none;\r\n    flex-grow: 0;\r\n    transition: 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        flex-grow: 1;\r\n        margin: 10px 15px;\r\n    }\r\n`;","import React, { useState } from 'react';\r\nimport {Formular, Label, Header, Input, Button} from \"./styled\";\r\n\r\nconst Form = ({ addNewTask, focusInput, inputRef}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent.trim() === \"\"){\r\n            return;\r\n        }\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n\r\n    return (\r\n        <Formular onSubmit={onFormSubmit}>\r\n            <Label>\r\n                <Header>\r\n                    Dodaj nowe zadanie\r\n                </Header>\r\n\r\n                <Input\r\n                    value={newTaskContent}\r\n                    onChange={(event) => setNewTaskContent(event.target.value)}\r\n                    placeholder=\"Co jest do zrobienia?\" autoFocus\r\n                    ref={inputRef} \r\n                />\r\n                <Button>Dodaj zadanie</Button>\r\n\r\n            </Label>\r\n        </Formular>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ListDiv = styled.div`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n    margin-top: 15px;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n    padding: 15px;\r\n    margin: 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: unset;\r\n        grid-template-rows: 1fr 2fr;\r\n    }\r\n`;","import React from 'react';\r\nimport {ListDiv, Header} from \"./styled\";\r\n\r\nconst List = ({ headerTitle, headerButtons, body }) => (\r\n    <ListDiv>\r\n        <Header>\r\n            {headerTitle}\r\n            {headerButtons}\r\n        </Header>\r\n        {body}\r\n    </ListDiv>\r\n);\r\n\r\nexport default List;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: ${({theme}) => theme.color.alto} 1px solid;\r\n    margin: 10px;\r\n    padding: 15px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-wrap: nowrap;\r\n\r\n    ${({hidden}) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    margin: 10px;\r\n    padding: 10px;\r\n    text-align: justify;\r\n\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    border: none;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    flex-shrink: 0;\r\n    cursor: pointer;\r\n    transition: 1s;\r\n\r\n    ${({done}) => done && css`\r\n        background-color: ${({theme}) => theme.color.green};\r\n        color: ${({theme}) => theme.color.white};\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background-color: ${({theme}) => theme.color.red};\r\n        color: white;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;","import React from 'react';\r\nimport {TasksList, Item, Content, Button} from \"./styled\"\r\n\r\nconst Tasks = ({ taskTable, hideDone, removeTask, toggleTaskDone }) => {\r\n    \r\n    return (\r\n    <TasksList>\r\n        {taskTable.map(task =>\r\n            <Item key={task.id} hidden={task.done && hideDone}>\r\n                <Button\r\n                    done\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✔\" : \" \"}\r\n                </Button>\r\n                <Content done={task.done}> \r\n                    {task.content} \r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    🗑\r\n                </Button>\r\n            </Item>\r\n        )}\r\n    </TasksList>\r\n)};\r\n\r\nexport default Tasks;","import styled, { css } from \"styled-components\";\r\n\r\nexport const FunctionButton = styled.span`\r\n    font-size: 20px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    ${({showDone}) => showDone && css`\r\n        border: none;\r\n        background-color: ${({theme}) => theme.color.white};\r\n        width: auto;\r\n        color: ${({theme}) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({theme}) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n\r\n    ${({checkAll}) => checkAll && css`\r\n        border: none;\r\n        background-color: ${({theme}) => theme.color.white};\r\n        width: auto;\r\n        color: ${({theme}) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({theme}) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n`;","import React from 'react';\r\nimport {FunctionButton, Button} from \"./styled\";\r\n\r\nconst Buttons = ({ hideDone, taskTable, toggleHideDone, setAllDone }) => {\r\n    if (taskTable.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <FunctionButton>\r\n            <Button\r\n                showDone\r\n                onClick={toggleHideDone}\r\n            >\r\n                {hideDone ? \"Wyświetl\" : \"Ukryj\"} wykonane\r\n            </Button>\r\n            <Button\r\n                checkAll\r\n                onClick={setAllDone}\r\n                disabled={taskTable.every(({ done }) => done)}\r\n            >\r\n                Zakończ wszystkie\r\n            </Button>\r\n        </FunctionButton>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.main`\r\n    max-width: 800px;\r\n    margin: 60px auto;\r\n    padding: 10px;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        margin: 20px auto;\r\n    }\r\n`;","import React from 'react';\r\nimport {MainContainer} from \"./styled\";\r\n\r\nconst Main = (props) => (\r\n    <MainContainer>\r\n        {props.children}\r\n    </MainContainer>\r\n)\r\n\r\nexport default Main;","import React, { useState, useRef } from 'react';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport {useTasks} from \"./useTasks\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  \n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    taskTable, \n    setAllDone, \n    removeTask, \n    toggleTaskDone, \n    addNewTask\n  } = useTasks();\n  \n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current.focus();\n  }\n\n\n\n  return (\n    <Main>\n      <Header title=\"Lista zadań\" />\n      <Form addNewTask={addNewTask} focusInput={focusInput} inputRef={inputRef} />\n\n      <List\n        taskTable={taskTable}\n        hideDone={hideDone}\n        headerTitle=\"Lista zadań:\"\n        headerButtons={\n          <Buttons\n            taskTable={taskTable}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n        body={\n          <Tasks\n            taskTable={taskTable}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n    const [taskTable, setTaskTable] = useState(\r\n      JSON.parse(localStorage.getItem(\"taskTable\")) === null ? [] : JSON.parse(localStorage.getItem(\"taskTable\"))\r\n    );\r\n  \r\n    useEffect(() => {\r\n      localStorage.setItem(\"taskTable\", JSON.stringify(taskTable));\r\n    }, [taskTable]);\r\n  \r\n    const setAllDone = () => {\r\n      setTaskTable(taskTable => taskTable.map(task => ({\r\n        ...task,\r\n        done: true,\r\n      })));\r\n    }\r\n  \r\n    const removeTask = (id) => {\r\n      setTaskTable(taskTable => taskTable.filter(taskTable => taskTable.id !== id));\r\n    };\r\n  \r\n    const toggleTaskDone = (id) => {\r\n      setTaskTable(taskTable => taskTable.map(task => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done };\r\n        }\r\n        return task;\r\n      }));\r\n    };\r\n  \r\n    const addNewTask = (content) => {\r\n      setTaskTable(taskTable => [\r\n        ...taskTable,\r\n        {\r\n          content,\r\n          done: false,\r\n          id: taskTable.length === 0 ? 1 : taskTable[taskTable.length - 1].id + 1,\r\n        }\r\n      ])\r\n    }\r\n  \r\n    return { taskTable, setAllDone, removeTask, toggleTaskDone, addNewTask };\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        white: \"#FFF\",\r\n        alto: \"#D3D3D3\",\r\n        green: \"#00cc00\",\r\n        red: \"#cc0000\",\r\n        teal: \"#008080\",\r\n        grey: \"#808080\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}