{"version":3,"sources":["Form/index.js","List/index.js","Tasks/index.js","Buttons/index.js","Header/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","placeholder","autoFocus","List","taskTable","hideDoneTasks","headerTitle","headerButtons","body","Tasks","props","map","task","key","id","done","content","Buttons","length","disabled","every","Header","title","Main","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAiBeA,G,UAdF,kBACT,0BAAMC,UAAU,QACZ,2BAAOA,UAAU,eACb,wBAAIA,UAAU,gBAAd,sBAIA,2BAAOA,UAAU,cAAcC,YAAY,wBAAwBC,WAAS,IAC5E,4BAAQF,UAAU,gBAAlB,qBCEGG,G,MAVF,SAAC,GAAD,EAAGC,UAAH,EAAcC,cAAd,IAA6BC,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,cAAeC,EAAzD,EAAyDA,KAAzD,OACT,yBAAKR,UAAU,QACX,wBAAIA,UAAU,gBACTM,EACAC,GAEJC,KCMMC,G,MAZD,SAACC,GAAD,OACV,wBAAIV,UAAU,eACTU,EAAMN,UAAUO,KAAI,SAAAC,GAAI,OACrB,wBAAIC,IAAKD,EAAKE,GAAId,UAAS,qBAAgBY,EAAKG,MAAQL,EAAML,cAAgB,qBAAuB,KACjG,4BAAQL,UAAU,mCAAmCY,EAAKG,KAAO,SAAM,KACvE,0BAAMf,UAAS,4BAAuBY,EAAKG,KAAO,2BAA6B,KAA/E,IAAuFH,EAAKI,QAA5F,KACA,4BAAQhB,UAAU,qCAAlB,uBCgBDiB,G,MAtBC,SAAC,GAAkC,IAAhCZ,EAA+B,EAA/BA,cAAeD,EAAgB,EAAhBA,UAC9B,OAAyB,IAArBA,EAAUc,OACH,KAIP,0BAAMlB,UAAU,wBACZ,4BACIA,UAAU,0BAETK,EAAgB,gBAAa,QAHlC,aAKA,4BACIL,UAAU,yBACVmB,SAAUf,EAAUgB,OAAM,qBAAGL,SAFjC,6BCPGM,EANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACX,4BAAQtB,UAAU,UACd,4BAAKsB,KCKEC,G,MANF,SAACb,GAAD,OACT,0BAAMV,UAAU,QACXU,EAAMc,YCGTpB,EAAY,CAChB,CAAEU,GAAI,EAAGE,QAAS,gBAAiBD,MAAM,GACzC,CAAED,GAAI,EAAGE,QAAS,cAAeD,MAAM,IAqB1BU,MAjBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQH,MAAQ,qBAChB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACElB,UAAWA,EACXC,eAVc,EAWdC,YAAc,oBACdC,cAAe,kBAAC,EAAD,CAASH,UAAWA,EAAWC,eAZhC,IAadG,KAAM,kBAAC,EAAD,CAAOJ,UAAWA,EAAWC,eAbrB,QCAFqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19ebd3c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n    <form className=\"form\">\r\n        <label className=\"form__label\">\r\n            <h2 className=\"form__header\">\r\n                Dodaj nowe zadanie\r\n                </h2>\r\n\r\n            <input className=\"form__input\" placeholder=\"Co jest do zrobienia?\" autoFocus />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n\r\n        </label>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst List = ({ taskTable, hideDoneTasks, headerTitle, headerButtons, body }) => (\r\n    <div className=\"list\">\r\n        <h2 className=\"list__header\">\r\n            {headerTitle}\r\n            {headerButtons}\r\n        </h2>\r\n        {body}\r\n    </div>\r\n);\r\n\r\nexport default List;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"list__tasks\">\r\n        {props.taskTable.map(task =>\r\n            <li key={task.id} className={`list__item ${task.done && props.hideDoneTasks ? \"list__item--hidden\" : \"\"}`}>\r\n                <button className=\"list__button list__button--done\">{task.done ? \"âœ”\" : \" \"}</button>\r\n                <span className={`list__taskContent ${task.done ? \" list__taskContent--done\" : \"\"}`}> {task.content} </span>\r\n                <button className=\"list__button list__button--remove\">ðŸ—‘</button>\r\n            </li>\r\n        )}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ hideDoneTasks, taskTable }) => {\r\n    if (taskTable.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <span className=\"list__functionButton\">\r\n            <button\r\n                className=\"list__button--showDone\"\r\n            >\r\n                {hideDoneTasks ? \"WyÅ›wietl\" : \"Ukryj\"} wykonane\r\n            </button>\r\n            <button\r\n                className=\"list__button--checkAll\"\r\n                disabled={taskTable.every(({ done }) => done)}\r\n            >\r\n                ZakoÅ„cz wszystkie\r\n            </button>\r\n        </span>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = (props) => (\r\n    <main className=\"main\">\r\n        {props.children}\r\n    </main>\r\n)\r\n\r\nexport default Main;","import React from 'react';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nconst taskTable = [\n  { id: 1, content: \"Undone task 1\", done: false },\n  { id: 2, content: \"Done task 2\", done: true },\n];\nconst hideDoneTasks = false;\n\nfunction App() {\n  return (\n    <Main>\n      <Header title = \"Lista zadaÅ„\"/>\n      <Form />\n\n      <List\n        taskTable={taskTable}\n        hideDoneTasks={hideDoneTasks}\n        headerTitle = \"Lista zadaÅ„:\"\n        headerButtons={<Buttons taskTable={taskTable} hideDoneTasks={hideDoneTasks} />} \n        body={<Tasks taskTable={taskTable} hideDoneTasks={hideDoneTasks} />}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}