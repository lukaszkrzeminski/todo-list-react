{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/List/styled.js","features/tasks/List/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Header/index.js","common/Main/styled.js","common/Main/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","theme.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","alto","Formular","styled","form","white","Label","label","Header","h2","Input","input","breakpoint","mobileMax","Button","button","tasksSlice","createSlice","name","initialState","taskTable","JSON","parse","localStorage","getItem","hideDone","reducers","addNewTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","actions","selectTasks","Form","focusInput","inputRef","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","value","onChange","target","placeholder","autoFocus","ref","ListDiv","div","List","headerTitle","headerButtons","body","TasksList","ul","Item","li","hidden","css","Content","span","green","remove","red","TaskList","useSelector","map","key","onClick","FunctionButton","showDone","teal","grey","checkAll","Buttons","length","disabled","every","title","className","MainContainer","main","Main","props","children","Tasks","useRef","current","focus","Boolean","window","location","hostname","match","store","configureStore","reducer","tasksReducer","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a01742d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n         box-sizing: border-box;\r\n         line-height: 1.15;\r\n    }\r\n\r\n    *, ::after, ::before{\r\n         box-sizing: inherit;\r\n    }\r\n\r\n    body{\r\n         font-family: 'Lato', sans-serif;\r\n         margin: 10px;\r\n         background-color: ${({theme}) => theme.color.alto};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Formular = styled.form`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    margin: 0;\r\n    padding: 15px;\r\n    font-weight: bold;\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n    flex-basis: 100%;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 5px 20px;\r\n    margin: 20px 15px;\r\n    flex-grow: 1;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        margin: 10px 15px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: auto;\r\n    padding: 10px;\r\n    margin: 20px 15px;\r\n    background-color: teal;\r\n    color: ${({theme}) => theme.color.white};\r\n    border: none;\r\n    flex-grow: 0;\r\n    transition: 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        flex-grow: 1;\r\n        margin: 10px 15px;\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        taskTable: JSON.parse(localStorage.getItem(\"taskTable\")),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ taskTable }, { payload }) => {\r\n            taskTable.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.taskTable.findIndex(task => task.id === action.payload);\r\n            state.taskTable[index].done = !state.taskTable[index].done;\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.taskTable.findIndex(task => task.id === action.payload);\r\n            state.taskTable.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            for( const task of state.taskTable){\r\n                task.done = true;\r\n            };\r\n        },\r\n    },\r\n});\r\nexport const { addNewTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.taskTable;\r\nexport default tasksSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport {Formular, Label, Header, Input, Button} from \"./styled\";\r\nimport { addNewTask } from \"../tasksSlice\";\r\n\r\nconst Form = ({focusInput, inputRef}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent.trim() === \"\"){\r\n            return;\r\n        }\r\n\r\n        dispatch(addNewTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n\r\n    return (\r\n        <Formular onSubmit={onFormSubmit}>\r\n            <Label>\r\n                <Header>\r\n                    Dodaj nowe zadanie\r\n                </Header>\r\n\r\n                <Input\r\n                    value={newTaskContent}\r\n                    onChange={(event) => setNewTaskContent(event.target.value)}\r\n                    placeholder=\"Co jest do zrobienia?\" autoFocus\r\n                    ref={inputRef} \r\n                />\r\n                <Button>Dodaj zadanie</Button>\r\n\r\n            </Label>\r\n        </Formular>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ListDiv = styled.div`\r\n    background-color: ${({theme}) => theme.color.white};\r\n    border: ${({theme}) => theme.color.alto} 1px solid;\r\n    margin-top: 15px;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    border-bottom: ${({theme}) => theme.color.alto} 2px solid;\r\n    padding: 15px;\r\n    margin: 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: unset;\r\n        grid-template-rows: 1fr 2fr;\r\n    }\r\n`;","import React from 'react';\r\nimport {ListDiv, Header} from \"./styled\";\r\n\r\nconst List = ({ headerTitle, headerButtons, body }) => (\r\n    <ListDiv>\r\n        <Header>\r\n            {headerTitle}\r\n            {headerButtons}\r\n        </Header>\r\n        {body}\r\n    </ListDiv>\r\n);\r\n\r\nexport default List;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TasksList = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: ${({theme}) => theme.color.alto} 1px solid;\r\n    margin: 10px;\r\n    padding: 15px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-wrap: nowrap;\r\n\r\n    ${({hidden}) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    margin: 10px;\r\n    padding: 10px;\r\n    text-align: justify;\r\n\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    border: none;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    flex-shrink: 0;\r\n    cursor: pointer;\r\n    transition: 1s;\r\n\r\n    ${({done}) => done && css`\r\n        background-color: ${({theme}) => theme.color.green};\r\n        color: ${({theme}) => theme.color.white};\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background-color: ${({theme}) => theme.color.red};\r\n        color: white;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {TasksList, Item, Content, Button} from \"./styled\"\r\nimport { selectTasks, toggleTaskDone, removeTask } from '../tasksSlice';\r\n\r\n\r\nconst TaskList = () => {\r\n    const {taskTable, hideDone} = useSelector(selectTasks);\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n    <TasksList>\r\n        {taskTable.map(task =>\r\n            <Item key={task.id} hidden={task.done && hideDone}>\r\n                <Button\r\n                    done\r\n                    onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                >\r\n                    {task.done ? \"✔\" : \" \"}\r\n                </Button>\r\n                <Content done={task.done}> \r\n                    {task.content} \r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => dispatch(removeTask(task.id))}\r\n                >\r\n                    🗑\r\n                </Button>\r\n            </Item>\r\n        )}\r\n    </TasksList>\r\n)};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const FunctionButton = styled.span`\r\n    font-size: 20px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    ${({showDone}) => showDone && css`\r\n        border: none;\r\n        background-color: ${({theme}) => theme.color.white};\r\n        width: auto;\r\n        color: ${({theme}) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({theme}) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n\r\n    ${({checkAll}) => checkAll && css`\r\n        border: none;\r\n        background-color: ${({theme}) => theme.color.white};\r\n        width: auto;\r\n        color: ${({theme}) => theme.color.teal};\r\n        transition: 1s;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({theme}) => theme.color.grey};\r\n        }\r\n        @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\r\n            padding: 10px 0;\r\n        }\r\n    `}\r\n`;","import React from 'react';\r\nimport { useSelector, useDispatch} from \"react-redux\";\r\nimport {FunctionButton, Button} from \"./styled\";\r\nimport { selectTasks, toggleHideDone, setAllDone} from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const {taskTable, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    if (taskTable.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <FunctionButton>\r\n            <Button\r\n                showDone\r\n                onClick={() => dispatch(toggleHideDone())}\r\n            >\r\n                {hideDone ? \"Wyświetl\" : \"Ukryj\"} wykonane\r\n            </Button>\r\n            <Button\r\n                checkAll\r\n                onClick={() => dispatch(setAllDone())}\r\n                disabled={taskTable.every(({ done }) => done)}\r\n            >\r\n                Zakończ wszystkie\r\n            </Button>\r\n        </FunctionButton>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n      </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.main`\r\n    max-width: 800px;\r\n    margin: 60px auto;\r\n    padding: 10px;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\r\n        margin: 20px auto;\r\n    }\r\n`;","import React from 'react';\r\nimport {MainContainer} from \"./styled\";\r\n\r\nconst Main = (props) => (\r\n    <MainContainer>\r\n        {props.children}\r\n    </MainContainer>\r\n)\r\n\r\nexport default Main;","import React, { useRef } from 'react';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Header from \"../../common/Header\";\nimport Main from \"../../common/Main\";\n\nfunction Tasks() {\n  \n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current.focus();\n  }\n\n  return (\n    <Main>\n      <Header title=\"Lista zadań\" />\n      <Form focusInput={focusInput} inputRef={inputRef} />\n\n      <List\n        headerTitle=\"Lista zadań:\"\n        headerButtons={\n          <Buttons />}\n        body={\n          <TaskList />}\n      />\n    </Main>\n  );\n}\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        white: \"#FFF\",\r\n        alto: \"#D3D3D3\",\r\n        green: \"#00cc00\",\r\n        red: \"#cc0000\",\r\n        teal: \"#008080\",\r\n        grey: \"#808080\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        taskTable: tasksReducer,\r\n    },\r\n});\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"taskTable\", JSON.stringify(store.getState().taskTable.taskTable));\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}